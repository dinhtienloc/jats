#if(${package})package ${package};

#end
#foreach( $classReference in $entity.classReferenceList )
import $classReference;
#end

@SuppressWarnings("serial")
@Entity
@Table(name="${entity.tableName}")
public class ${template.generatedName} extends AbstractEntity {

#if(${entity.singleKey})
	// Primary key:
	@Id
	@Column(name = "${entity.singleKey.columnName}")
	private ${entity.singleKey.dataType} ${entity.singleKey.lcName};
	public ${entity.singleKey.dataType} get${entity.singleKey.name}() {return this.${entity.singleKey.lcName};}
#if(${entity.singleKey.converter})
	public void set${entity.singleKey.name}(${entity.singleKey.dataType} ${entity.singleKey.lcName}) {this.${entity.singleKey.lcName} = ${entity.singleKey.converter}(${entity.singleKey.lcName});}
#else
	public void set${entity.singleKey.name}(${entity.singleKey.dataType} ${entity.singleKey.lcName}) {this.${entity.singleKey.lcName} = ${entity.singleKey.lcName};}
#end	
	@Override
	public Serializable getPk() {return this.get${entity.singleKey.name}();}
#else
	// Composite key
	@EmbeddedId
	private Pk pk;
	
	@Override
	public Pk getPk() {return pk;}
	public void setPk(Pk pk) {this.pk = pk;}
	
	// Getters for Pk fields
#foreach( $propKey in $keyList )
	public ${propKey.dataType} get${propKey.name}() {return this.getPk().get${propKey.name}();}
#end	
#end

	// Non-key fields:
#foreach( $prop in $nonKeyList )
#foreach( $jpaAttribute in $prop.java.jpa.jpaAttributeList )
	$jpaAttribute
#end
	private ${prop.dataType} ${prop.lcName};
	public ${prop.dataType} get${prop.name}() {return ${prop.lcName};}
#if(!${prop.java.jpa.isObjectVersion})	
#if(${prop.converter})	
	public void set${prop.name}(${prop.dataType} ${prop.lcName}) {this.${prop.lcName} = ${prop.converter}(${prop.lcName});}
#else
	public void set${prop.name}(${prop.dataType} ${prop.lcName}) {this.${prop.lcName} = ${prop.lcName};}
#end
#end	

#end
	// Foreign keys (@ManyToOne relationships)
#foreach( $fk in $entity.impFkList )

	@ManyToOne
#if(${fk.joinColumn})
	@JoinColumn(name="${fk.joinColumn.name}", referencedColumnName="${fk.joinColumn.referencedColumnName}", insertable = false, updatable = false)
#else
	@JoinColumns({
#foreach( $jc in $fk.joinColumnList)
		@JoinColumn(name="${jc.name}", referencedColumnName="${jc.referencedColumnName}", insertable = false, updatable = false)#if(!${jc.isLast}),
#end#end})
#end
	private ${fk.importedEntity.name} ${fk.importedEntity.lcName};	
	public ${fk.importedEntity.name} get${fk.importedEntity.name}() {return this.${fk.importedEntity.lcName};}
	public void set${fk.importedEntity.name}(${fk.importedEntity.name} ${fk.importedEntity.lcName}) {this.${fk.importedEntity.lcName} = ${fk.importedEntity.lcName};}
#end
	
	// Inverse for foreign keys (@OneToMany relationships)

#foreach( $fk in $entity.expFkList )

	@OneToMany(mappedBy = "${entity.lcName}", cascade = CascadeType.ALL)
	private List<${fk.exportedEntity.name}> ${fk.exportedEntity.lcName}s = new ArrayList<${fk.exportedEntity.name}>();	
	public List<${fk.exportedEntity.name}> get${fk.exportedEntity.name}s() { return this.${fk.exportedEntity.lcName}s;}
	public void set${fk.exportedEntity.name}s(List<${fk.exportedEntity.name}> ${fk.exportedEntity.lcName}s) {this.${fk.exportedEntity.lcName}s = ${fk.exportedEntity.lcName}s;}
#end

	// Additional Constructors if any

	// Other Methods if any
	
	// Constructors
#if(${entity.singleKey})
	public ${entity.name}() {}	
	public ${entity.name}(${entity.singleKey.dataType} ${entity.singleKey.lcName}) {
		this.set${entity.singleKey.name}(${entity.singleKey.lcName});
	}
#else

	public ${entity.name}() {this.pk = new Pk();}
	public ${entity.name}(Pk pk) {this.pk = pk;}
	
	// Embedded primary key class
	@Embeddable
	public static class Pk extends AbstractPk {
#foreach( $propKey in $keyList )
#foreach( $attr in $propKey.java.jpa.jpaAttributeList )
		$attr
#end
		private ${propKey.dataType} ${propKey.lcName};
#if(!${propKey.java.jpa.isObjectVersion})
		public ${propKey.dataType} get${propKey.name}() {return ${propKey.lcName};}
#if(${propKey.converter})	
		public void set${propKey.name}(${propKey.dataType} ${propKey.lcName}) {this.${propKey.lcName} = ${propKey.converter}(${propKey.lcName});}
#else
		public void set${propKey.name}(${propKey.dataType} ${propKey.lcName}) {this.${propKey.lcName} = ${propKey.lcName};}
#end

#end
#end

		public Pk() {}		
		public Pk(${tags.methodArgs($keyList)}) {
#foreach( $propKey in $keyList )
			this.set${propKey.name}(${propKey.lcName});
#end
		}
	}
#end
}