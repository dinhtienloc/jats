using System;
using System.Collections.Generic;
using System.Data.Common;
using MyGobyLib.AdoNet;
using ${packages.get('Model').value};

#foreach( $classReference in $entity.classReferenceList )
using $classReference;
#end

namespace ${currentPackage}
{
	/// <summary>
    /// ${entity.name} DataAccess API.
    /// </summary>
    /// <author>Loc Ha (haducloc13@gmail.com)</author>
	public class ${currentTemplate.generatedName} : DaoSupport#if(${currentTemplate.templateInterface}), ${currentTemplate.templateInterface.generatedName}
#end
	{
		
		#region Insert ${entity.name}
		public static readonly string __${entity.ucName}_INSERT_SQL =
		@"${entity.insertSql}#if(${entity.isAutoIncrement}); SELECT CAST(SCOPE_IDENTITY() AS ${entity.singleKey.identityDbTypeName})#end";
		
        public string ${entity.ucName}_INSERT_SQL
        {
            get { return __${entity.ucName}_INSERT_SQL;  }
        }
        		
		public void Insert${entity.name}(${entity.name} ${entity.lcName})
		{
			// Create DbCommand
 			DbCommand cmd = CreateCommand(${entity.ucName}_INSERT_SQL);
 			
 			// Register Parameters
#if(${entity.isAutoIncrement})
#foreach( $prop in $nonKeyList )
			cmd.RegisterParameter("${prop.columnLcName}", ${entity.lcName}.${prop.name});
#end
#else
#foreach( $prop in $propertyList )
			cmd.RegisterParameter("${prop.columnLcName}", ${entity.lcName}.${prop.name});
#end
#end

			// Execute command
#if(${entity.isAutoIncrement})
			${entity.singleKey.dataType} newId = cmd.ExecuteScalar<${entity.singleKey.dataType}>();
			${entity.lcName}.${entity.singleKey.name} = newId;
#else
			cmd.ExecuteNonSelect();
#end
		}
		#endregion
		
		#region Update ${entity.name}
		public static readonly string __${entity.ucName}_UPDATE_SQL =
		@"${entity.updateSql}";

        public string ${entity.ucName}_UPDATE_SQL
        {
            get { return __${entity.ucName}_UPDATE_SQL;  }
        }
        				
		public int Update${entity.name}(${entity.name} ${entity.lcName})
		{
			// Create DbCommand
			DbCommand cmd = CreateCommand(${entity.ucName}_UPDATE_SQL);
			
			// Register Parameters
#foreach( $prop in $propertyList )
			cmd.RegisterParameter("${prop.columnLcName}", ${entity.lcName}.${prop.name});
#end		
			
			// Execute command	
            int rowAffect = cmd.ExecuteNonSelect();
            return rowAffect;
		}
		#endregion
		
		#region Delete ${entity.name}
		public static readonly string __${entity.ucName}_DELETE_SQL =
		@"${entity.deleteSql}";
		
        public string ${entity.ucName}_DELETE_SQL
        {
            get { return __${entity.ucName}_DELETE_SQL;  }
        }
        		
		public int Delete${entity.name}(${tags.methodArgs($keyList)})
		{
			// Create DbCommand
			DbCommand cmd = CreateCommand(${entity.ucName}_DELETE_SQL);
			
			// Register Parameters
#foreach( $prop in $keyList )
			cmd.RegisterParameter("${prop.columnLcName}", $prop.lcName);
#end		
			// Execute command
            int rowAffect = cmd.ExecuteNonSelect();
            return rowAffect;
		}
		#endregion
		
		#region Get ${entity.name}
		public static readonly string __${entity.ucName}_GET_SQL =
		@"${entity.getSql}";
		
        public string ${entity.ucName}_GET_SQL
        {
            get { return __${entity.ucName}_GET_SQL;  }
        }
        		
		public $entity.name Get${entity.name}(${tags.methodArgs($keyList)})
		{
			// Create DbCommand
			DbCommand cmd = CreateCommand(${entity.ucName}_GET_SQL);
			
			// Register Parameters
#foreach( $prop in $keyList )
			cmd.RegisterParameter("${prop.columnLcName}", $prop.lcName);
#end			
			
			// Execute command
            Product obj = cmd.ExecuteSingleReader(${entity.name}RowMapper);
            return obj;
		}
		#endregion
		
		#region Get ${entity.name} List
		public static readonly string __${entity.ucName}_GET_LIST_SQL =
		@"${entity.getListSql}";
				
        public string ${entity.ucName}_GET_LIST_SQL
        {
            get { return __${entity.ucName}_GET_LIST_SQL;  }
        }
        				
		public IList<${entity.name}> Get${entity.name}List()
		{
			// Create DbCommand
		 	DbCommand cmd = CreateCommand(${entity.ucName}_GET_LIST_SQL);
		 	
		 	// Execute command
            IList<${entity.name}> list = cmd.ExecuteListReader(${entity.name}RowMapper);
            return list;
		}
		#endregion
		
		#region Row Mappers
		public static readonly RowMapperDelegate<${entity.name}> ${entity.name}RowMapper = 
        (DbDataReader reader, int rowNum) =>
        {                        
            return new ${entity.name}
            {
#foreach( $prop in $propertyList )
				${prop.name} = (${prop.dataType})reader.Value("${prop.columnLcName}"),
#end                        
            };
        };
        #endregion
	}
}